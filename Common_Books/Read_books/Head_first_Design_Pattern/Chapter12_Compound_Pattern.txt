
                                    Chapter 12: The Compound Patterns
                                      Patterns of Patterns

Working together
Patterns are often used together and combined within the same design solution.
A compound pattern combines two or more pattern into a solution that solves a recurring or general problem.

Duck reunion
  1. First, we'll create a Quackable interface.
  2. Now, some Ducks that implement Quackable
  3. Okay, we've got our ducks; now all we need is a simulator.
  4. When ducks are around, geese can't be far
  5. We need a goose adapter.
  6. Now geese should be able to play in the simulator, too.
  7. Now let's give this a quick run...
  8. We're going to make those Quackologists happy and give them some quack counts.
  9. We need to update the simulator to create decorated ducks.
  10. We need a factory to produce ducks!
  11. Let's set up the simulator to use the factory
  12. Let's create a flock of ducks (well, actually a flock of Quackables).
  13. Now we need to alter the simulator
  Safety versus transparency
  14. First we need an interface for our object
  15. Now, we need to make sure all the concrete classes taht implement Quackable can handle being a QuackObservable
  16. Integrate the helper Observable with the Quackable classes.
  17. We’re almost there! We just need to work on the Observer side of the pattern.
  18. We're ready to observe. Let's update the simulator and give it a try.

What did we do?
We started with a bunch of Quackables...
  A goose came along and wanted to act like a Quackable too. (Adapter Pattern)
  Then, the Quackologists decided they wanted to count quacks. (Decorator Pattern)
  But the Quackologists were worried they’d forget to add the QuackCounter decorator. (Decorator Pattern)
  We had management problems keeping track of all those ducks and geese and quackables.(Composite Pattern and Iterator Pattern)
  The Quackologists also wanted to be notified when any Quackable quacked. (Observer Pattern)

A duck’s-eye view: the class diagram

the model view controller song
The King of Compound Patterns
If Elvis were a compound pattern, his name would be Model-View-Controller, and he’d be singing a little song like this...

Meet Model-View-Controller
A closer look...
  1. You’re the user—you interact with the view.
  2. The controller asks the model to change its state.
  3. The controller may also ask the view to change.
  4. The model notifies the view when its state has changed.
  5. The view asks the model for state.

Understanding MVC as a set of Patterns
Using MVC to control the beat...
Meet the Java DJ View
  The controller is in the middle...
  Let’s not forget about the model underneath it all...
  Putting the pieces together
  Building the pieces
  Now let’s have a look at the concrete BeatModel class
  The View
  Implementing the View
  Implementing the View, continued...
  Now for the Controller
  And here’s the implementation of the controller:
  Putting it all together...

Exploring Strategy

Tool for your Design Toolbox
OO Principles
  Encapsulate what varies
  Favor composition over inheritance
  Program to interfaces, not implementation.
  Strive for loosely coupled designs between objects that interact.
  Classes should be open for extension but close for modification.
  Depend on abstractions. Do not depend on concrete classes.
  Only talk to your friends
  Don't call us, we'll call you.
  A class should have only one reason to change.

OO Pattern
  Compound Patterns: A Compound Pattern combines two or more patterns into a solution that solves a recurring or general problem.

Bullet Points
  The Model View Controller (MVC) Pattern is a compound pattern consisting the Observer, Strategy, and Composite Pattern.
  The model makes use of the Observer Pattern so that it can keep observers updated yet stay decoupled from them.
  The Controller is the Strategy for the view. The view can use different implementations of the controller to get different behavior.
  The view uses the Composite Pattern to implement the user interface which usually consists of nested components like panels, frames and buttons.
  These patterns work together to decouple the three players in the MVC model, which keeps designs clear and flexible.
  The Adapter Pattern can be used to adapt a new model to an existing view and controller.
  MVC has been updated to the web.
  There are may web MVC frameworks with various adaptations of the MVC pattern to fit the client/server application structure.
